import streamlit as st
import yfinance as yf
import pandas as pd
import ta
import datetime

# Page Configuration
st.set_page_config(page_title="Signal LuxAlgo Like", layout="wide")
st.title("üîç Scanner de Signaux Acheteur/Vendeur (Type LuxAlgo) - Journalier")

# Top 5 en d√©mo pour tester rapidement
TOP50_STOCKS = ["AAPL", "MSFT", "GOOGL", "AMZN", "NVDA"]
TOP50_CRYPTOS = ["BTC-USD", "ETH-USD", "BNB-USD", "SOL-USD", "XRP-USD"]

@st.cache_data
def fetch_data(ticker):
    try:
        # R√©cup√©ration des donn√©es sur 3 mois avec intervalle de 1 jour
        df = yf.download(ticker, period="3mo", interval="1d")
        
        # Affichage des 5 premi√®res lignes pour voir les donn√©es
        if df.empty:
            return None, f"‚ùå Aucune donn√©e disponible pour {ticker}"
        
        st.write(f"üìä Donn√©es de {ticker} :")
        st.write(df.head())  # Afficher les 5 premi√®res lignes pour v√©rifier les donn√©es

        # V√©rification si la colonne 'Close' existe
        if "Close" not in df.columns:
            return None, "Colonne 'Close' manquante dans les donn√©es"
        
        # Conversion des donn√©es 'Close' en num√©rique
        df["Close"] = pd.to_numeric(df["Close"], errors="coerce")
        df.dropna(inplace=True)  # Suppression des valeurs NaN

        # V√©rifier si les donn√©es sont encore pr√©sentes apr√®s nettoyage
        if df.empty:
            return None, "Toutes les valeurs sont NaN apr√®s nettoyage"
        
        return df, "OK"
    
    except Exception as e:
        return None, f"‚ùå Erreur lors de la r√©cup√©ration des donn√©es : {str(e)}"

def get_signal(df):
    try:
        close = df["Close"]
        
        # Calcul des indicateurs EMA
        ema_fast = ta.trend.ema_indicator(close=close, window=9)
        ema_slow = ta.trend.ema_indicator(close=close, window=21)
        
        df["EMA_fast"] = ema_fast
        df["EMA_slow"] = ema_slow
        
        # Assurer qu'il y a au moins deux points pour le croisement
        if len(df) < 2:
            return "‚ö†Ô∏è Donn√©es insuffisantes"

        # D√©tection du croisement EMA
        if df["EMA_fast"].iloc[-2] < df["EMA_slow"].iloc[-2] and df["EMA_fast"].iloc[-1] > df["EMA_slow"].iloc[-1]:
            return "üü¢ Signal Acheteur"
        elif df["EMA_fast"].iloc[-2] > df["EMA_slow"].iloc[-2] and df["EMA_fast"].iloc[-1] < df["EMA_slow"].iloc[-1]:
            return "üî¥ Signal Vendeur"
        else:
            return "‚ö™Ô∏è Aucun Signal"
    
    except Exception as e:
        return f"‚ùå Erreur calcul du signal : {str(e)}"

def afficher_signaux(tickers, titre):
    st.subheader(titre)
    resultats = []
    
    for ticker in tickers:
        # R√©cup√©rer les donn√©es
        df, status = fetch_data(ticker)
        
        # Si les donn√©es sont disponibles, on calcule le signal
        if df is None:
            signal = f"‚ùå {status}"
        else:
            signal = get_signal(df)
        
        resultats.append({"Ticker": ticker, "Signal": signal})
    
    # Affichage des r√©sultats sous forme de tableau
    st.dataframe(pd.DataFrame(resultats), use_container_width=True)

# Ex√©cution des affichages pour les actions et les cryptos
afficher_signaux(TOP50_STOCKS, "üìà Top 5 Actions")
afficher_signaux(TOP50_CRYPTOS, "üí∞ Top 5 Cryptos")











